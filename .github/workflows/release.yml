name: Manual Build and Release

on:
    workflow_dispatch:
        inputs:
            releaseType:
                description: "Which version increment?"
                required: true
                default: "patch"
                type: choice
                options:
                    - major
                    - minor
                    - patch
            isBeta:
                description: "Build as a beta release?"
                required: true
                default: "false"
                type: choice
                options:
                    - "false"
                    - "true"

permissions:
    contents: write
    issues: write
    pull-requests: write
    security-events: write

jobs:
    version-update-and-build:
        runs-on: windows-latest
        env:
            SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        strategy:
            matrix:
                runtime: [win-x64, win-x86, win-arm64]
        steps:
            - uses: actions/create-github-app-token@v1
              id: app-token
              with:
                  app-id: ${{ vars.APP_ID }}
                  private-key: ${{ secrets.APP_PRIVATE_KEY }}

            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  submodules: recursive
                  token: ${{ steps.app-token.outputs.token }}

            - name: Set Git User
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Setup Dependencies
              shell: pwsh
              run: |
                  # Install Python if not available
                  if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
                    choco install python -y
                    refreshenv
                  }
                  
                  # Make script executable (Git Bash style)
                  if (Test-Path ".github/scripts/increment_version.py") {
                    Write-Host "Python script found"
                  } else {
                    Write-Host "Warning: Python script not found"
                  }

            - name: Determine Version with GitVersion
              id: gitversion
              shell: pwsh
              run: |
                  $env:RELEASE_TYPE = "${{ github.event.inputs.releaseType }}"
                  python .github/scripts/increment_version.py
              env:
                  RELEASE_TYPE: ${{ github.event.inputs.releaseType }}

            - name: Debug GitVersion Output
              shell: pwsh
              run: |
                  Write-Host "FullSemVer: ${{ steps.gitversion.outputs.fullsemver }}"
                  Write-Host "Major: ${{ steps.gitversion.outputs.major }}"
                  Write-Host "Minor: ${{ steps.gitversion.outputs.minor }}"
                  Write-Host "Patch: ${{ steps.gitversion.outputs.patch }}"

            - name: Update Directory.Build.props Versions
              shell: pwsh
              run: |
                  $major = "${{ steps.gitversion.outputs.major }}"
                  $minor = "${{ steps.gitversion.outputs.minor }}"
                  $patch = "${{ steps.gitversion.outputs.patch }}"
                  
                  $content = Get-Content "Directory.Build.props" -Raw
                  $content = $content -replace '<MajorVersion>.*</MajorVersion>', "<MajorVersion>$major</MajorVersion>"
                  $content = $content -replace '<MinorVersion>.*</MinorVersion>', "<MinorVersion>$minor</MinorVersion>"
                  $content = $content -replace '<PatchVersion>.*</PatchVersion>', "<PatchVersion>$patch</PatchVersion>"
                  Set-Content "Directory.Build.props" -Value $content

            - name: Handle Beta Builds
              shell: pwsh
              run: |
                  $content = Get-Content "Directory.Build.props" -Raw
                  $content = $content -replace '<IsBeta>.*</IsBeta>', "<IsBeta>${{ github.event.inputs.isBeta }}</IsBeta>"
                  Set-Content "Directory.Build.props" -Value $content

            - name: Create Pull Request for Version Update
              id: create-pr
              uses: peter-evans/create-pull-request@v5
              with:
                  token: ${{ steps.app-token.outputs.token }}
                  commit-message: "chore: update version to ${{ steps.gitversion.outputs.fullsemver }} (isBeta=${{ github.event.inputs.isBeta }})"
                  title: "🤖 Version Update: ${{ steps.gitversion.outputs.fullsemver }}"
                  body: |
                      Automated version update for release ${{ steps.gitversion.outputs.fullsemver }}
                      
                      - **Version**: ${{ steps.gitversion.outputs.fullsemver }}
                      - **Beta**: ${{ github.event.inputs.isBeta }}
                      - **Release Type**: ${{ github.event.inputs.releaseType }}
                      - **Runtime**: ${{ matrix.runtime }}
                      
                      This PR was automatically created by the release workflow.
                  branch: version-update-${{ steps.gitversion.outputs.fullsemver }}-${{ matrix.runtime }}
                  delete-branch: true

            - name: Auto-merge Version Update PR
              if: steps.create-pr.outputs.pull-request-number
              uses: peter-evans/enable-pull-request-automerge@v3
              with:
                  token: ${{ steps.app-token.outputs.token }}
                  pull-request-number: ${{ steps.create-pr.outputs.pull-request-number }}
                  merge-method: squash

            - name: Wait for PR to be merged
              if: steps.create-pr.outputs.pull-request-number
              shell: pwsh
              run: |
                  $prNumber = "${{ steps.create-pr.outputs.pull-request-number }}"
                  $maxAttempts = 30
                  $attempt = 0
                  
                  Write-Host "⏳ Waiting for PR #$prNumber to be merged..."
                  
                  do {
                      Start-Sleep -Seconds 10
                      $attempt++
                  
                      try {
                          $prInfo = gh pr view $prNumber --json state,mergeable,mergeStateStatus --repo ${{ github.repository }}
                          $prData = $prInfo | ConvertFrom-Json
                  
                          Write-Host "Attempt $attempt/$maxAttempts - PR State: $($prData.state), Mergeable: $($prData.mergeable), Merge Status: $($prData.mergeStateStatus)"
                  
                          if ($prData.state -eq "MERGED") {
                              Write-Host "✅ PR merged successfully!"
                              break
                          } elseif ($prData.state -eq "CLOSED") {
                              Write-Error "❌ PR was closed without merging"
                              exit 1
                          }
                  
                          if ($attempt -ge $maxAttempts) {
                              Write-Error "❌ PR was not merged within expected time (5 minutes)"
                              exit 1
                          }
                      } catch {
                          Write-Host "Error checking PR status: $($_.Exception.Message)"
                          if ($attempt -ge $maxAttempts) {
                              Write-Error "❌ Failed to check PR status after $maxAttempts attempts"
                              exit 1
                          }
                      }
                  } while ($true)
              env:
                  GH_TOKEN: ${{ steps.app-token.outputs.token }}

            - name: Checkout Updated Main Branch
              if: steps.create-pr.outputs.pull-request-number
              run: |
                  git fetch origin main
                  git checkout main
                  git reset --hard origin/main

            - name: Set Up .NET (v9)
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 9.x

            - name: Restore Dependencies
              run: dotnet restore

            - name: Build Solution
              run: dotnet build --configuration Release --parallel

            - name: Run Tests
              run: dotnet test --configuration Release --no-build --verbosity normal
              continue-on-error: true

            - name: Publish Solution Components
              shell: pwsh
              run: |
                  # Create main publish directory
                  New-Item -ItemType Directory -Path "./publish/ModForwarder-${{ matrix.runtime }}" -Force
                  
                  # Publish Console Tooling with optimizations
                  dotnet publish PenumbraModForwarder.ConsoleTooling `
                    -c Release `
                    -p:PublishSingleFile=true `
                    -p:PublishReadyToRun=true `
                    --self-contained=true `
                    -p:DebugType=None -p:DebugSymbols=false `
                    -r ${{ matrix.runtime }} `
                    -o "./publish/temp-console-${{ matrix.runtime }}" `
                    -f net9.0
                  
                  # Publish UI Application with optimizations
                  dotnet publish PenumbraModForwarder.UI `
                    -c Release `
                    -p:PublishSingleFile=true `
                    -p:PublishReadyToRun=true `
                    --self-contained=true `
                    -p:DebugType=None -p:DebugSymbols=false `
                    -r ${{ matrix.runtime }} `
                    -o "./publish/temp-ui-${{ matrix.runtime }}" `
                    -f net9.0
                  
                  # Publish Background Worker with optimizations
                  dotnet publish PenumbraModForwarder.BackgroundWorker `
                    -c Release `
                    -p:PublishSingleFile=true `
                    -p:PublishReadyToRun=true `
                    --self-contained=true `
                    -p:DebugType=None -p:DebugSymbols=false `
                    -r ${{ matrix.runtime }} `
                    -o "./publish/temp-worker-${{ matrix.runtime }}" `
                    -f net9.0
                  
                  # Move all files to the root ModForwarder directory
                  Copy-Item -Path "./publish/temp-console-${{ matrix.runtime }}/*" -Destination "./publish/ModForwarder-${{ matrix.runtime }}/" -Recurse -Force
                  Copy-Item -Path "./publish/temp-ui-${{ matrix.runtime }}/*" -Destination "./publish/ModForwarder-${{ matrix.runtime }}/" -Recurse -Force
                  Copy-Item -Path "./publish/temp-worker-${{ matrix.runtime }}/*" -Destination "./publish/ModForwarder-${{ matrix.runtime }}/" -Recurse -Force
                  
                  # Clean up temporary directories
                  Remove-Item -Path "./publish/temp-console-${{ matrix.runtime }}" -Recurse -Force
                  Remove-Item -Path "./publish/temp-ui-${{ matrix.runtime }}" -Recurse -Force
                  Remove-Item -Path "./publish/temp-worker-${{ matrix.runtime }}" -Recurse -Force

            - name: Validate Executables
              shell: pwsh
              run: |
                  # Verify executables were created and are not zero-byte
                  $exeFiles = Get-ChildItem -Path "./publish/ModForwarder-${{ matrix.runtime }}/" -Filter "*.exe"
                  foreach ($exe in $exeFiles) {
                    if ($exe.Length -eq 0) {
                      Write-Error "Error: $($exe.Name) is empty"
                      exit 1
                    }
                    $sizeKB = [math]::Round($exe.Length / 1KB, 2)
                    Write-Host "✓ $($exe.Name) - $sizeKB KB"
                  }

            - name: Run GitVersion again
              id: gitversion2
              shell: pwsh
              run: |
                  # Read version from Directory.Build.props using XML
                  [xml]$buildProps = Get-Content "Directory.Build.props"
                  $major = $buildProps.Project.PropertyGroup.MajorVersion
                  $minor = $buildProps.Project.PropertyGroup.MinorVersion
                  $patch = $buildProps.Project.PropertyGroup.PatchVersion
                  
                  $fullSemVer = "$major.$minor.$patch"
                  $previousTag = ""
                  
                  try {
                    $previousTag = git describe --tags --abbrev=0 2>$null
                  } catch {
                    Write-Host "No previous tag found"
                  }
                  
                  echo "FULL_SEMVER=$fullSemVer" >> $env:GITHUB_ENV
                  echo "MAJORMINORPATCH=$fullSemVer" >> $env:GITHUB_ENV
                  echo "PREVIOUS_TAG=$previousTag" >> $env:GITHUB_ENV

            - name: Get Latest Release from GitHub
              id: get-release
              uses: actions/github-script@v7
              with:
                  script: |
                      const { data: releases } = await github.rest.repos.listReleases({
                        owner: context.repo.owner,
                        repo: context.repo.repo
                      });
                      if (!releases || releases.length === 0) {
                        core.setOutput("latest_tag", "");
                      } else {
                        core.setOutput("latest_tag", releases[0].tag_name);
                      }

            - name: Compare GitHub Tag with GitVersion (SemVer)
              shell: pwsh
              run: |
                  $ghLatestTagRaw = "${{ steps.get-release.outputs.latest_tag }}"
                  $fullSemVer = "${{ env.FULL_SEMVER }}"
                  
                  if ([string]::IsNullOrEmpty($ghLatestTagRaw)) {
                    Write-Host "No previous GitHub release found. We'll do a brand-new release."
                    exit 0
                  }
                  
                  $ghLatestTag = $ghLatestTagRaw -replace '^v', ''
                  $cleanSemVer = $fullSemVer -replace '-.*$', ''
                  
                  $ghParts = $ghLatestTag.Split('.')
                  $gitParts = $cleanSemVer.Split('.')
                  
                  $ghMajor = [int]$ghParts[0]
                  $ghMinor = [int]$ghParts[1]
                  $ghPatch = [int]$ghParts[2]
                  $gitMajor = [int]$gitParts[0]
                  $gitMinor = [int]$gitParts[1]
                  $gitPatch = [int]$gitParts[2]
                  
                  Write-Host "GitHub's release version: $ghMajor.$ghMinor.$ghPatch"
                  Write-Host "Local version:           $gitMajor.$gitMinor.$gitPatch"
                  
                  if (($gitMajor -gt $ghMajor) -or 
                      (($gitMajor -eq $ghMajor) -and ($gitMinor -gt $ghMinor)) -or
                      (($gitMajor -eq $ghMajor) -and ($gitMinor -eq $ghMinor) -and ($gitPatch -gt $ghPatch))) {
                    Write-Host "Newer version found locally; proceed with release."
                  } else {
                    Write-Host "Local version is NOT newer. You might decide to skip or handle differently."
                  }

            - name: Generate Release Notes
              id: gen-notes
              shell: pwsh
              run: |
                  $gitVersionPreviousTag = "${{ env.PREVIOUS_TAG }}"
                  $ghLatestTagRaw = "${{ steps.get-release.outputs.latest_tag }}"
                  $fallbackTag = $ghLatestTagRaw
                  
                  if ([string]::IsNullOrEmpty($gitVersionPreviousTag) -and (-not [string]::IsNullOrEmpty($ghLatestTagRaw))) {
                    Write-Host "No local previous tag found; falling back to GitHub release tag '$fallbackTag'."
                    $gitVersionPreviousTag = $fallbackTag
                  }
                  
                  if ([string]::IsNullOrEmpty($gitVersionPreviousTag)) {
                    $commits = "No previous tag — skipping commit history."
                  } else {
                    try {
                      $commits = git log "$gitVersionPreviousTag..HEAD" --pretty=format:'- %s (%h)' | Where-Object { $_ -notmatch "chore: update version to" }
                      $commits = $commits -join "`n"
                    } catch {
                      $commits = "Unable to generate commit history."
                    }
                  }
                  
                  $commits | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
                  echo "COMMITS<<EOF" >> $env:GITHUB_ENV
                  echo $commits >> $env:GITHUB_ENV
                  echo "EOF" >> $env:GITHUB_ENV

            - name: Create Release ZIP
              shell: pwsh
              run: |
                  Set-Location "./publish"
                  Compress-Archive -Path "ModForwarder-${{ matrix.runtime }}" -DestinationPath "ModForwarder-${{ matrix.runtime }}.v${{ env.MAJORMINORPATCH }}.zip"
                  Set-Location ".."

            - name: Upload Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ModForwarder-${{ matrix.runtime }}-v${{ env.MAJORMINORPATCH }}
                  path: ./publish/ModForwarder-${{ matrix.runtime }}.v${{ env.MAJORMINORPATCH }}.zip
                  retention-days: 6

            - name: Create GitHub Release (only for win-x64)
              if: matrix.runtime == 'win-x64'
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v${{ env.MAJORMINORPATCH }}
                  name: Release v${{ env.MAJORMINORPATCH }}
                  body: |
                      ## Changes (since last release):
                      ${{ env.COMMITS }}
                      
                      ## Available Downloads:
                      - `ModForwarder-win-x64.v${{ env.MAJORMINORPATCH }}.zip` - Windows 64-bit
                      - `ModForwarder-win-x86.v${{ env.MAJORMINORPATCH }}.zip` - Windows 32-bit  
                      - `ModForwarder-win-arm64.v${{ env.MAJORMINORPATCH }}.zip` - Windows ARM64
                  files: |
                      ./publish/ModForwarder-win-x64.v${{ env.MAJORMINORPATCH }}.zip
                      ./publish/ModForwarder-win-x86.v${{ env.MAJORMINORPATCH }}.zip
                      ./publish/ModForwarder-win-arm64.v${{ env.MAJORMINORPATCH }}.zip
                  draft: false
                  prerelease: ${{ github.event.inputs.isBeta == 'true' }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Notify on Success
              if: success()
              shell: pwsh
              run: |
                  Write-Host "✅ Release v${{ env.MAJORMINORPATCH }} created successfully for ${{ matrix.runtime }}!"
                  if ("${{ matrix.runtime }}" -eq "win-x64") {
                    Write-Host "📦 Download: https://github.com/${{ github.repository }}/releases/tag/v${{ env.MAJORMINORPATCH }}"
                  }

            - name: Rollback on Failure
              if: failure()
              shell: pwsh
              run: |
                  Write-Host "❌ Build failed for ${{ matrix.runtime }}. Version update was handled via PR."
                  Write-Host "Check the PR and workflow logs for details."
              continue-on-error: true